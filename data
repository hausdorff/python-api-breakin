ubigraph home demos docs downloads papers major topics getting started basic api functions language bindings styles ubigraph xml rpc manual ubigraph is a system for visualizing dynamic graphs this version is shipped in binary form as a standalone server that responds to requests using xml rpc this makes it easy to use from c c java ruby python and other languages for which xml rpc implementations are available since xml rpc uses tcp ip the server which visualizes the graph can be run on a different machine operating system than the client which is manipulating the graph it is also possible to have multiple clients updating the graph simultaneously note that for clients to be on different machines from the server firewalls must be configured to allow traffic on port getting started this version of the ubigraph software is shipped in binary form as a standalone server clients talk to the server using xml rpc a standard remote procedure call protocol that uses http post requests to call methods the method call and return results are encoded with xml the use of xml rpc makes it trivial to use ubigraph with popular scripting languages such as python and ruby starting and using the server the server process must be started before any clients can connect to it to do this just run the ubigraph server program found in the bin subdirectory of the distribution you should be rewarded with a message running ubigraph xml rpc server and a new window which is empty and black if you get an error message such as failed to bind listening socket to port number check if the server is already running you can now run the programs included in the examples subdirectory of the distribution the gui is quite primitive but supports panning by dragging the mouse some of the keys recognized include key s function esc exit and zoom in out zoom way out zoom way in and start increase stop y axis rotation u d start increase stop z axis rotation r reset vertices to random positions increase decrease time step h toggle runge kutta euler step p toggle serial parallel disturb with spatial frequency components f f decrease increase friction a toggle draw acceleration directions e toggle draw directed edges v toggle draw vertices s toggle draw strain g toggle gravity for directed edges t toggle draw octtree used by barnes hut debugging the xml protocol layer you shouldn t need to worry about the xml layer unless you are implementing your own client interface in some language that is not yet supported however if you re curious to see what the messages being sent to and from the server look like set xmlrpc trace xml in your environment before running ubigraph server here is an example call response pair which creates a new edge from vertex to vertex which is given an edge id by the server xml rpc call xml version encoding utf methodcall methodname ubigraph new edge methodname params param value i i value param param value i i value param params methodcall xml rpc response xml version encoding utf methodresponse params param value i i value param params methodresponse the basic api functions the five functions shown below cover the basic operations api functions are presented in c language syntax but the way these are adapted to other languages is straightforward void ubigraph clear int ubigraph new vertex int ubigraph new edge int x int y int ubigraph remove vertex int x int ubigraph remove edge int e ubigraph clear resets the graph deleting any vertices and edges that exist it s a good idea to call this method at the beginning of any session in case a previous client failed to clean up new vertex creates a vertex and returns its vertex id an integer you need to remember this vertex id to create edges with new edge which creates an edge between two vertices specified by their vertex ids and returns its edge id an integer to delete a vertex call ubigraph remove vertex and supply its vertex id any edges touching the vertex are removed also to delete an edge call ubigraph remove edge and supply its edge id the remove methods return on success or on failure i e you tried to remove an edge or vertex that did not exist specifying vertex and edge ids if you do not want to keep track of vertex or edge id s there is an alternate pair of api routines that allow you to specify the vertex id and edge id when creating vertices and edges int ubigraph new vertex w id int id int ubigraph new edge w id int id int x int y these routines return on success or if the requested id is already in use language bindings in the xmlrpc subdirectory of the distribution you can find bindings and or examples of how to use the ubigraph server from various programming languages python and ruby are the easiest to get working since xml rpc is included in the standard libraries for these languages for java you will need to install a jar package for xmlrpc support for c and c you will need to build and install the xmlrpc c librares python xml rpc is included in the python standard library an example usage is shown below example graph layout import xmlrpclib create an object to represent our server server url http rpc server xmlrpclib server server url g server ubigraph create a graph for i in range g new vertex w id i make some edges for i in range g new edge i i using python interactively python provides an easy way to experiment with the api and styles if you start an interactive python session and paste in the first few lines above you can then generate some vertices and play with their styles python python apr type help copyright credits or license for more information import xmlrpclib server xmlrpclib server http localhost rpc g server ubigraph x g new vertex y g new vertex g new edge x y g set vertex attribute x color ff g set vertex attribute y shape torus g set vertex attribute y color ffff g set vertex attribute x label this is red ruby xml rpc is included with ruby here is an example program example graph layout require xmlrpc client server xmlrpc client new http rpc for id in server call ubigraph new vertex w id id end for id in server call ubigraph new edge id id end java you will need to install apache xml rpc for java which can be obtained from http ws apache org xmlrpc the jar files in the lib subdirectory of the apache xml rpc binary distribution should be placed in your usual classpath in mac os x they can be copied to system library java extensions in the xmlrpc java subdirectory of the ubigraph distribution you will find ubigraph jar which provides a class org ubiety ubigraph ubigraphclient that hides the xmlrpc details javadoc for this class can be found in the xmlrpc java html subdirectory of the distribution an example use is shown below example graph layout import org ubiety ubigraph ubigraphclient public class example public static void main string args ubigraphclient graph new ubigraphclient int n int vertices new int n for int i i n i vertices i graph newvertex for int i i n i graph newedge vertices i vertices i n c an api is provided for c and c that hides the underlying xml rpc implementation once you have this api built using it is very simple e g include ubigraphapi h int main int const argc const char const argv int i for i i i ubigraph new vertex w id i for i i i ubigraph new edge i i sleep ubigraph clear building the c language api the xmlrpc c subdirectory of the ubigraph distribution contains some things you will need to build here is how to proceed if you do not already have it you will need to download build and install xml rpc for c c xmlrpc c which can be obtained from http xmlrpc c sourceforge net this may require installing a development version of libwww in the xmlrpc c subdirectory of the ubigraph distribution you will need to do make libubigraphclient to build a library libubigraphclient a which provides the c language api at this point you should be able to build and run the example program in the xmlrpc c subdirectory start the server first of course to use the c api in your own programs you will include ubigraphapi h this requires that you put the ubigraph include directory where ubigraphapi h is found in your include path using i when linking these libraries will be required lubigraphclient lxmlrpc client lxmlrpc lxmlrpc util lxmlrpc xmlparse lxmlrpc xmltok the xmlrpc libraries should be installed in one of the standard library paths e g usr include lib for the linker to find libubigraphclient a you will need to either copy this to a standard library path or include the path with a l option c follow the instructions for c above use extern c when including the header file e g example graph layout extern c include ubigraphapi h int main int const argc const char const argv for int i i i ubigraph new vertex w id i for int i i i ubigraph new edge i i sleep ubigraph clear styles vertex styles vertex style attributes can be set with the following function int ubigraph set vertex attribute vertex id t x string attribute string value however if you have a large number of vertices with similar attributes you should use style ids as described below the table below shows currently supported style attributes attribute values default color string of the form specifying an rgb triple ff shape sphere shapedetail indicates the level of detail with which the shape should be rendered this is relevant only for the sphere cone and torus shapes which are described by polygons performance may improve for large graphs if the level of detail is reduced label a string to be displayed near the vertex labelpos where to display the label relative to the vertex this vector is multiplied by the vertex size to calculate the label offset i e if you double the size of a vertex the label position will automatically adjust itself implemented in libubiety but yet in ubigraphapi orientation vector indicating the direction in which the shape is oriented not yet implemented size real number indicating the relative size of the shape fontcolor string of the form specifying an rgb triple ffffff fontfamily string indicating the font to be used for the label recognized choices are helvetica and times roman only the combinations of family and size shown below are recognized other choices of family and size result in a best guess helvetica fontsize integer giving the size of the font in points used for the label manifold the id of a manifold to which this vertex should be restricted not yet implemented edge styles style ids and the style model result t ubigraph new style style id t parent style result t ubigraph set style attribute style id t s const char attribute const char value result t ubigraph set vertex style vertex id t x style id t smanifolds